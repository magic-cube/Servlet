package servlet;

import java.io.IOException;
import java.util.Enumeration;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/*
 * 查看Servlet中的方法
 */
public class AServlet implements Servlet {

	/*
	 * 生命周期方法(由TomCat来调用)
	 * 在Servlet被销毁之前调用,并且只会被调用一次(临终遗言...)
	 */
	@Override
	public void destroy() {
		System.out.println("destory()....");
	}

	/*
	 * 用来获取servlet的配置信息
	 */
	@Override
	public ServletConfig getServletConfig() {
		System.out.println("getServletConfig()....");
		return null;
	}

	/*
	 * 获取servlet的信息
	 */
	@Override
	public String getServletInfo() {
		System.out.println("getServletInfo()....");
		return "我是一个快乐的servlet";
	}
	
	/*
	 * 生命周期方法(由TomCat来调用)
	 * 会在Servlet对象创建之后马上执行,并只执行一次(出生之后)
	 */
	@Override
	public void init(ServletConfig servletConfig) throws ServletException {
		System.out.println("init()....");
		
		/*
		 * 获取初始化参数 
		 */
		System.out.println(servletConfig.getInitParameter("p1"));
		System.out.println(servletConfig.getInitParameter("p2"));
		
		/*
		 * 获取所有初始化参数的名称
		 */
		Enumeration e=servletConfig.getInitParameterNames();
		while(e.hasMoreElements()){
			System.out.println(e.nextElement());
		}
	}
	
	/*
	 * 生命周期方法(由TomCat来调用)
	 * 会被调用多次!!!
	 * 每次处理请求都是在调用这个方法
	 */
	@Override
	public void service(ServletRequest request, ServletResponse response)
			throws ServletException, IOException {
		System.out.println("service()....");
	}

}
